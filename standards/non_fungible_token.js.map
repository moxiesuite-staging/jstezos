{"version": 3, "mappings": "AAAA,QAAA,SAAA;AAEA,QAAA,QAAA,EAAA,iBAAA,EAAA,eAAA;AACA,QAAA,sBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,0BAAA,SAA2BA,QAA3B;IAEI;QAGI,OAAO,IAAAC,iBAAA,CAAkBC,sBAAA,CAAuBC,YAAvB,CAAlB;IAHX;IAKA;QAGI,OAAO,IAAAC,eAAA,CAAgBF,sBAAA,CAAuBG,UAAvB,CAAhB;IAHX;AAPJ", "sources": ["non_fungible_token.py"], "names": ["Contract", "ContractParameter", "michelson_to_micheline", "parameter_tz", "ContractStorage", "storage_tz"], "sourcesContent": ["from functools import lru_cache\n\nfrom pytezos.michelson.contract import Contract, ContractParameter, ContractStorage\nfrom pytezos.michelson.micheline import michelson_to_micheline\n\nparameter_tz = \"\"\"\nparameter \n    (or (or (nat %burn :token_id) (pair %mint (address %owner) (nat %token_id)))\n        (pair %transfer (address %destination) (nat %token_id)))\n\"\"\"\nstorage_tz = \"storage (map nat address)\"\n\n\nclass NonFungibleTokenImpl(Contract):\n\n    @property\n    @lru_cache(maxsize=None)\n    def parameter(self) -> ContractParameter:\n        return ContractParameter(michelson_to_micheline(parameter_tz))\n\n    @property\n    @lru_cache(maxsize=None)\n    def storage(self) -> ContractStorage:\n        return ContractStorage(michelson_to_micheline(storage_tz))\n"]}