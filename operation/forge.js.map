{"version": 3, "mappings": "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", "sources": ["forge.py"], "names": ["operation_tags", "encode_content", "forge_activate_account", "forge_reveal", "forge_transaction", "forge_origination", "forge_delegation", "encode_proc", "encode_content.get", "content", "NotImplementedError", "res", "forge_base58", "operation_group", "b''\n.join", "map", "forge_operation", "forge_nat", "bytes", "bytes.fromhex", "forge_address", "forge_public_key", "content.get", "forge_bool", "forge_entrypoint", "forge_array", "forge_micheline", "forge_script"], "sourcesContent": ["from pytezos.encoding import forge_address, forge_bool, forge_nat, forge_array, forge_public_key, \\\n    forge_base58\nfrom pytezos.michelson.forge import forge_entrypoint, forge_micheline, forge_script\n\noperation_tags = {\n    'endorsement': 0,\n    'proposal': 5,\n    'ballot': 6,\n    'seed_nonce_revelation': 1,\n    'double_endorsement_evidence': 2,\n    'double_baking_evidence': 3,\n    'activate_account': 4,\n    'reveal': 107,\n    'transaction': 108,\n    'origination': 109,\n    'delegation': 110\n}\n\n\ndef forge_operation(content) -> bytes:\n    \"\"\" Forge operation content (locally).\n\n    :param content: {.., \"kind\": \"transaction\", ...}\n    \"\"\"\n    encode_content = {\n        'activate_account': forge_activate_account,\n        'reveal': forge_reveal,\n        'transaction': forge_transaction,\n        'origination': forge_origination,\n        'delegation': forge_delegation\n    }\n    encode_proc = encode_content.get(content['kind'])\n    if not encode_proc:\n        raise NotImplementedError(content['kind'])\n\n    return encode_proc(content)\n\n\ndef forge_operation_group(operation_group):\n    \"\"\" Forge operation group (locally).\n\n    :param operation_group: {\"branch\": \"B...\", \"contents\": [], ...}\n    \"\"\"\n    res = forge_base58(operation_group['branch'])\n    res += JS(\"b''\").join(map(forge_operation, operation_group['contents']))\n    return res\n\n\ndef forge_activate_account(content: dict):\n    res = forge_nat(operation_tags[content['kind']])\n    res += forge_base58(content['pkh'])\n    res += bytes.fromhex(content['secret'])\n    return res\n\n\ndef forge_reveal(content):\n    res = forge_nat(operation_tags[content['kind']])\n    res += forge_address(content['source'], tz_only=True)\n    res += forge_nat(int(content['fee']))\n    res += forge_nat(int(content['counter']))\n    res += forge_nat(int(content['gas_limit']))\n    res += forge_nat(int(content['storage_limit']))\n    res += forge_public_key(content['public_key'])\n    return res\n\n\ndef forge_transaction(content):\n    res = forge_nat(operation_tags[content['kind']])\n    res += forge_address(content['source'], tz_only=True)\n    res += forge_nat(int(content['fee']))\n    res += forge_nat(int(content['counter']))\n    res += forge_nat(int(content['gas_limit']))\n    res += forge_nat(int(content['storage_limit']))\n    res += forge_nat(int(content['amount']))\n    res += forge_address(content['destination'])\n\n    if content.get('parameters'):\n        res += forge_bool(True)\n        res += forge_entrypoint(content['parameters']['entrypoint'])\n        res += forge_array(forge_micheline(content['parameters']['value']))\n    else:\n        res += forge_bool(False)\n\n    return res\n\n\ndef forge_origination(content):\n    res = forge_nat(operation_tags[content['kind']])\n    res += forge_address(content['source'], tz_only=True)\n    res += forge_nat(int(content['fee']))\n    res += forge_nat(int(content['counter']))\n    res += forge_nat(int(content['gas_limit']))\n    res += forge_nat(int(content['storage_limit']))\n    res += forge_nat(int(content['balance']))\n\n    if content.get('delegate'):\n        res += forge_bool(True)\n        res += forge_address(content['delegate'], tz_only=True)\n    else:\n        res += forge_bool(False)\n\n    res += forge_script(content['script'])\n\n    return res\n\n\ndef forge_delegation(content):\n    res = forge_nat(operation_tags[content['kind']])\n    res += forge_address(content['source'], tz_only=True)\n    res += forge_nat(int(content['fee']))\n    res += forge_nat(int(content['counter']))\n    res += forge_nat(int(content['gas_limit']))\n    res += forge_nat(int(content['storage_limit']))\n\n    if content.get('delegate'):\n        res += forge_bool(True)\n        res += forge_address(content['delegate'], tz_only=True)\n    else:\n        res += forge_bool(False)\n\n    return res\n\n\n__all__ = [\"forge_activate_account\", \"forge_delegation\", \"forge_operation\", \"forge_operation_group\", \"forge_origination\", \"forge_reveal\", \"forge_transaction\"]\n"]}