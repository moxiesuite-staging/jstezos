{"version": 3, "mappings": "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", "sources": ["content.py"], "names": ["value", "Decimal", "ValueError", "tez", "format_mutez", "tez.quantize", "content", "this.operation", "level", "nonce", "op1", "op2", "bh1", "bh2", "pkh", "activation_code", "proposals", "list", "source", "period", "proposal", "ballot", "fee", "counter", "gas_limit", "storage_limit", "public_key", "amount", "destination", "parameters", "balance", "script", "delegate"], "sourcesContent": ["from decimal import Decimal\n\ndef format_mutez(value):\n    if value is None:\n        value = 0\n    elif isinstance(value, Decimal):\n        value = int(value * 10 ** 6)\n    elif isinstance(value, float):\n        raise ValueError('Please use decimal instead of float')\n    return str(value)\n\n\ndef format_tez(value):\n    tez = Decimal(format_mutez(value)) / 10 ** 6\n    return tez.quantize(Decimal('0.000001'))\n\n\nclass ContentMixin:\n\n    def operation(self, content):\n        return content\n\n    def endorsement(self, level: int):\n        \"\"\"\n        Endorse a block\n        :param level: Endorsed level\n        :return: dict or OperationGroup\n        \"\"\"\n        return self.operation({\n            'kind': 'endorsement',\n            'level': str(level)\n        })\n\n    def seed_nonce_revelation(self, level: int, nonce):\n        \"\"\"\n        Reveal the nonce committed operation in the previous cycle.\n        More info https://tezos.stackexchange.com/questions/567/what-are-nonce-revelations\n        :param level: When nonce hash was committed\n        :param nonce: Hex string\n        :return: dict or OperationGroup\n        \"\"\"\n        return self.operation({\n            'kind': 'seed_nonce_revelation',\n            'level': str(level),\n            'nonce': nonce\n        })\n\n    def double_endorsement_evidence(self, op1: dict, op2: dict):\n        \"\"\"\n        Provide evidence of double endorsement (endorsing two different blocks at the same block height).\n        :param op1: Inline endorsement {\n            \"branch\": $block_hash,\n            \"operations\": {\n                \"kind\": \"endorsement\",\n                \"level\": integer \u2208 [-2^31-2, 2^31+2]\n            },\n            \"signature\"?: $Signature\n        }\n        :param op2: Inline endorsement\n        :return: dict or OperationGroup\n        \"\"\"\n        return self.operation({\n            'kind': 'double_endorsement_evidence',\n            'op1': op1,\n            'op2': op2\n        })\n\n    def double_baking_evidence(self, bh1, bh2):\n        \"\"\"\n        Provide evidence of double baking (two different blocks at the same height).\n        :param bh1: First block hash\n        :param bh2: Second block hash\n        :return: dict or OperationGroup\n        \"\"\"\n        return self.operation({\n            'kind': 'double_baking_evidence',\n            'bh1': bh1,\n            'bh2': bh2\n        })\n\n    def activate_account(self, activation_code='', pkh=''):\n        \"\"\"\n        Activate recommended allocations for contributions to the TF fundraiser.\n        More info https://activate.tezos.com/\n        :param activation_code: Secret code from pdf, leave empty for autocomplete\n        :param pkh: Public key hash, leave empty for autocomplete\n        :return: dict or OperationGroup\n        \"\"\"\n        return self.operation({\n            'kind': 'activate_account',\n            'pkh': pkh,\n            'secret': activation_code\n        })\n\n    def proposals(self, proposals,\n                  source='', period=0):\n        \"\"\"\n        Submit and/or upvote proposals to amend the protocol.\n        Can only be submitted during a proposal period.\n        More info https://tezos.gitlab.io/master/whitedoc/voting.html\n        :param proposals: List of proposal hashes or single proposal hash\n        :param source: Public key hash (of the signatory), leave None for autocomplete\n        :param period: Number of the current voting period, leave 0 for autocomplete\n        :return: dict or OperationGroup\n        \"\"\"\n        if not isinstance(proposals, list):\n            proposals = [proposals]\n\n        return self.operation({\n            'kind': 'proposals',\n            'source': source,\n            'period': str(period),\n            'proposals': proposals\n        })\n\n    def ballot(self, proposal, ballot,\n               source='', period=0):\n        \"\"\"\n        Vote for a proposal in a given voting period.\n        Can only be submitted during Testing_vote or Promotion_vote periods, and only once per period.\n        More info https://tezos.gitlab.io/master/whitedoc/voting.html\n        :param proposal: Hash of the proposal\n        :param ballot: 'Yay', 'Nay' or 'Pass'\n        :param source: Public key hash (of the signatory), leave None for autocomplete\n        :param period: Number of the current voting period, leave None for autocomplete\n        :return: dict or OperationGroup\n        \"\"\"\n        return self.operation({\n            'kind': 'ballot',\n            'source': source,\n            'period': str(period),\n            'proposal': proposal,\n            'ballot': ballot\n        })\n\n    def reveal(self, public_key='',\n               source='', counter=0, fee=0, gas_limit=0, storage_limit=0):\n        \"\"\"\n        Reveal the public key associated with a tz address.\n        :param public_key: Public key to reveal, Base58 encoded\n        :param source: Public key hash of the key revealed, leave None to use signatory address\n        :param counter: Current account counter, leave None for autocomplete\n        (More info https://tezos.stackexchange.com/questions/632/how-counter-grows)\n        :param fee: Leave None for autocomplete\n        :param gas_limit: Leave None for autocomplete\n        :param storage_limit: Leave None for autocomplete\n        :return: dict or OperationGroup\n        \"\"\"\n        return self.operation({\n            'kind': 'reveal',\n            'source': source,\n            'fee': format_mutez(fee),\n            'counter': str(counter),\n            'gas_limit': str(gas_limit),\n            'storage_limit': str(storage_limit),\n            'public_key': public_key\n        })\n\n    def transaction(self, destination, amount=0, parameters=None,\n                    source='', counter=0, fee=0, gas_limit=0, storage_limit=0):\n        \"\"\"\n        Transfer tezzies to a given address (implicit or originated).\n        If the receiver is a smart contract, then optional parameters may be passed.\n        :param source: Address from which funds will be sent, leave None to use signatory address\n        :param destination: Address\n        :param amount: Amount to send in microtez (int) or tez (Decimal) (optional)\n        :param counter: Current account counter, leave None for autocomplete\n        :param parameters: { \"entrypoint\": $string, \"value\": $Micheline expression } (optional)\n        :param fee: Leave None for autocomplete\n        :param gas_limit: Leave None for autocomplete\n        :param storage_limit: Leave None for autocomplete\n        :return: dict or OperationGroup\n        \"\"\"\n        content = {\n            'kind': 'transaction',\n            'source': source,\n            'fee': format_mutez(fee),\n            'counter': str(counter),\n            'gas_limit': str(gas_limit),\n            'storage_limit': str(storage_limit),\n            'amount': format_mutez(amount),\n            'destination': destination\n        }\n\n        if parameters is not None:\n            content['parameters'] = parameters\n\n        return self.operation(content)\n\n    def origination(self, script, balance=0, delegate=None,\n                    source='', counter=0, fee=0, gas_limit=0, storage_limit=0):\n        \"\"\"\n        Deploy smart contract (scriptless KT accounts are not used for delegation since Babylon)\n        :param script: {\"code\": $Micheline, \"storage\": $Micheline}\n        :param balance: Amount transferred on the balance, WARNING: there is no default way to withdraw funds.\n        More info: https://tezos.stackexchange.com/questions/1315/can-i-withdraw-funds-from-an-empty-smart-contract\n        :param delegate: Set contract delegate, default None\n        :param source: Address from which funds will be sent, leave None to use signatory address\n        :param counter: Current account counter, leave None for autocomplete\n        :param fee: Leave None for autocomplete\n        :param gas_limit: Leave None for autocomplete\n        :param storage_limit: Leave None for autocomplete\n        :return: dict or OperationGroup\n        \"\"\"\n        content = {\n            'kind': 'origination',\n            'source': source,\n            'fee': format_mutez(fee),\n            'counter': str(counter),\n            'gas_limit': str(gas_limit),\n            'storage_limit': str(storage_limit),\n            'balance': format_mutez(balance),\n            'script': script\n        }\n\n        if delegate is not None:\n            content['delegate'] = delegate\n\n        return self.operation(content)\n\n    def delegation(self, delegate='',\n                   source='', counter=0, fee=0, gas_limit=0, storage_limit=0):\n        \"\"\"\n        Delegate funds or register yourself as a delegate.\n        :param delegate: tz address of delegate, leave None to register yourself as a delegate\n        :param source: Address from which funds will be delegated, leave None to use signatory address\n        :param counter: Current account counter, leave None for autocomplete\n        :param fee: Leave None for autocomplete\n        :param gas_limit: Leave None for autocomplete\n        :param storage_limit: Leave None for autocomplete\n        :return: dict or OperationGroup\n        \"\"\"\n        return self.operation({\n            'kind': 'delegation',\n            'source': source,\n            'fee': format_mutez(fee),\n            'counter': str(counter),\n            'gas_limit': str(gas_limit),\n            'storage_limit': str(storage_limit),\n            'delegate': delegate\n        })\n"]}