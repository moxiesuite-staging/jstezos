{"version": 3, "mappings": "AAAA,QAAA,eAAA;;;;;;;;;;;AAEAA,+BAA+B;AAC/BC,mCAAmC;AACnCC,eAAe;AACfC,2BAA2B;AAC3BC,+BAA+B;AAG/B,oEAA6D,EAA7D;;IACIC,OAAO,CAAIC,eAAA,CAAgBC,OAAhB,CAAJC,OAAA,EAAA,CAAgCC,UAAhC;IACPC,MAEI,CAFE,CAAAR,YAAA,EAAA,CACA,CAAAC,wBAAA,EAAA,CAA2BE,IAA3B,CADA,CAEF,EAAA,gBAAE,CAAI,CAAAD,4BAAA,EAAA,CAA+BO,YAA/B,CAAJ,CAAF;IACJ,OAAO,CAAAD,GAAA,EAAA,CAAME,OAAN;AALX;AAQA;IACI,OAAOC,aAAA,aACKN,yBACKO,iBAAA,CAAkBP,OAAlB,iBACM,CAAR,CAAA,EAAA,EAAA,CAAK,EAAL,CAAQ,EAAA,CAAE,CAAA,CAAA,EAAA,CAAI,CAAJ,CAAF,EAHhB;AADX;AAQA;;IACIQ,SAAS,CACL,QADK,EACK,KADL,EAEL,YAFK,EAES,KAFT,EAGL,aAHK,EAGU,CAAgCR,OAAAS,IAAA,CAAY,QAAZ,CAAhC,GAAAhB,4BAAA,GAA2D,KAA3D,CAHV,EAIL,aAJK,EAIU,CAAgCO,OAAAS,IAAA,CAAY,YAAZ,CAAhC,GAAAhB,4BAAA,GAA+D,KAA/D,CAJV;IAMT,OAAOe,MAAAE,IAAA,CAAWV,OAAA,CAAQ,MAAR,CAAX;AAPX;AAUA;;IACIQ,SAAS,CACL,QADK,EACK,CADL,EAEL,YAFK,EAES,CAFT,EAGL,aAHK,EAGU,CAAoCR,OAAAS,IAAA,CAAY,QAAZ,CAApC,GAAAf,gCAAA,GAA+D,KAA/D,CAHV,EAIL,aAJK,EAIU,CAAoCM,OAAAS,IAAA,CAAY,YAAZ,CAApC,GAAAf,gCAAA,GAAmE,GAAnE,CAJV;IAMT,OAAOc,MAAAE,IAAA,CAAWV,OAAA,CAAQ,MAAR,CAAX;AAPX;AAUA;;IACIQ,SAAS,CACL,QADK,EACK,CADL,EAEL,YAFK,EAES,CAFT,EAGL,aAHK,EAGU,GAHV,EAIL,aAJK,EAIU,CAAKR,OAAAS,IAAA,CAAY,YAAZ,CAAL,GAAA,CAAA,GAAoC,GAApC,CAJV;IAMT,OAAOD,MAAAE,IAAA,CAAWV,OAAA,CAAQ,MAAR,CAAX;AAPX;AAUA", "sources": ["fees.py"], "names": ["hard_gas_limit_per_operation", "hard_storage_limit_per_operation", "minimal_fees", "minimal_nanotez_per_byte", "minimal_nanotez_per_gas_unit", "size", "forge_operation", "content", "forge_operation(content).length", "extra_size", "fee", "consumed_gas", "reserve", "calculate_fee", "default_gas_limit", "values", "content.get", "values.get"], "sourcesContent": ["from pytezos.operation.forge import forge_operation\n\nhard_gas_limit_per_operation = 1040000\nhard_storage_limit_per_operation = 60000\nminimal_fees = 100\nminimal_nanotez_per_byte = 1\nminimal_nanotez_per_gas_unit = .1\n\n\ndef calculate_fee(content, consumed_gas, extra_size, reserve=10):\n    size = len(forge_operation(content)) + extra_size\n    fee = minimal_fees \\\n        + minimal_nanotez_per_byte * size \\\n        + int(minimal_nanotez_per_gas_unit * consumed_gas)\n    return fee + reserve\n\n\ndef default_fee(content):\n    return calculate_fee(\n        content=content,\n        consumed_gas=default_gas_limit(content),\n        extra_size=32 + 64 + 3 * 3  # branch, signature, fee:gas_limit:storage_limit mutez values (+3 bytes)\n    )\n\n\ndef default_gas_limit(content):\n    values = {\n        'reveal': 10000,\n        'delegation': 10000,\n        'origination': hard_gas_limit_per_operation if content.get('script') else 10000,\n        'transaction': hard_gas_limit_per_operation if content.get('parameters') else 10207\n    }\n    return values.get(content['kind'])\n\n\ndef default_storage_limit(content):\n    values = {\n        'reveal': 0,\n        'delegation': 0,\n        'origination': hard_storage_limit_per_operation if content.get('script') else 10207,\n        'transaction': hard_storage_limit_per_operation if content.get('parameters') else 257\n    }\n    return values.get(content['kind'])\n\n\ndef burn_cap(content):\n    values = {\n        'reveal': 0,\n        'delegation': 0,\n        'origination': 257,\n        'transaction': 0 if content.get('parameters') else 257\n    }\n    return values.get(content['kind'])\n\n\n__all__ = [\"burn_cap\", \"calculate_fee\", \"default_fee\", \"default_gas_limit\", \"default_storage_limit\", \"hard_gas_limit_per_operation\", \"hard_storage_limit_per_operation\", \"minimal_fees\", \"minimal_nanotez_per_byte\", \"minimal_nanotez_per_gas_unit\"]\n"]}