{"version": 3, "mappings": ";;;AAGA,QAAA,cAAA;;;;;;;;;;;AAGA;;IAEI,OAAO,EAAA,CAAI,CAAc,UAAd,GAAA,CAAQA,IAAR,CAAJ;AAFX;AAKAC,uBAAuBC,cAAA;AAGvB;;IACI,IAAG,CAAAC,SAAA,IAAA,CAAa,KAAb,CAAH;QACIA,YAAY;IADhB;IAGAC,OAAO,CAAQC,WAAYF,UAApB,GAAA,CAA+B,IAA/B;IACP,IAAG,CAAAC,IAAA,GAAA,CAASA,IAAAE,QAAT,CAAH;QACI,OAAOC,EAAAC,IAAA,CAAO,OAAP,EAAiB,EAAjB,EAAqBJ,IAAAE,QAArB;IADX;AALJ;AASA;IACI,OAAO,EAAA,CAAIG,CAAAC,WAAA,CAAa,GAAb,CAAJ;AADX;AAIA,uDAAgDC,mBAAhD,aAA8E,KAA9E;IACI;;QACIP,OAAeC,UAAR,CAAoBI,CAApB;QAEP,IAAG,sBAAA,CAAKL,IAAL,CAAA,IAAA,CAAcQ,QAAd,CAAH;YACIC,OAAO;QADX;YAGI,IAAGC,QAAH;gBACIC,MAAUC,OAAAC,UAAA,CAAkBb,IAAlB,UAAJ,EAAAc,QAAA,CAAqC,QAArC,EAA+C,EAA/C;YADV;gBAGIH,MAAM;YAHV;YAIAF,OAAO;QAPX;QASA,IAAGC,QAAH;YACIK,MAAMC,kBAAA,CAAmBf,UAAnB,EAA+BI,CAA/B;QADV;YAGIU,MAAM;QAHV;QAKA,OAAO;IAjBX;IAmBA,OAAO,IAAAE,KAAA,CAAUC,GAAA,CAAIC,WAAJ,EAAiBC,MAAA,CAAOC,WAAP,EAAoBC,GAAA,CAAIrB,UAAJ,CAApB,CAAjB,CAAV;AApBX;AAsBA", "sources": ["docstring.py"], "names": ["main", "__interactive_mode__", "is_interactive", "attr_name", "attr", "class_type", "attr.__doc__", "re", "re.sub", "x", "x.startswith", "default_attr_filter", "property", "name", "extended", "sig", "inspect", "inspect.signature", "inspect.signature(attr).toString().replace", "doc", "get_attr_docstring", "\"\\n\".join", "map", "attr_format", "filter", "attr_filter", "dir"], "sourcesContent": ["import re\nimport inspect\nimport types\nfrom functools import update_wrapper\n\n\ndef is_interactive():\n    import __main__ as main\n    return not hasattr(main, '__file__')\n\n\n__interactive_mode__ = is_interactive()\n\n\ndef     get_attr_docstring(class_type, attr_name):\n    if attr_name == 'get':\n        attr_name = '__call__'\n\n    attr = getattr(class_type, attr_name, None)\n    if attr and attr.__doc__:\n        return re.sub(r' {3,}', '', attr.__doc__)\n\n\ndef default_attr_filter(x):\n    return not x.startswith('_')\n\n\ndef get_class_docstring(class_type, attr_filter=default_attr_filter, extended=False):\n    def attr_format(x):\n        attr = getattr(class_type, x)\n\n        if type(attr) == property:\n            name = f'.{x}'\n        else:\n            if extended:\n                sig = str(inspect.signature(attr)).replace('self, ', '')\n            else:\n                sig = '()'\n            name = f'.{x}{sig}'\n\n        if extended:\n            doc = get_attr_docstring(class_type, x)\n        else:\n            doc = ''\n\n        return f'{name}{doc}'\n\n    return '\\n'.join(map(attr_format, filter(attr_filter, dir(class_type))))\n\n__all__ = [\"default_attr_filter\", \"get_attr_docstring\", \"get_class_docstring\", \"is_interactive\", \"__interactive_mode__\"]\n"]}